from dotenv import load_dotenv
from langchain_openai import AzureChatOpenAI
import re, os

load_dotenv()


class Utils:

    def initialize_llm(self):
        # Initialize AzureChatOpenAI
        model = AzureChatOpenAI(
            deployment_name=os.getenv("AZURE_DEPLOYMENT_NAME"),
            model_name=os.getenv("AZURE_MODEL_NAME"),
            azure_endpoint=os.getenv("AZURE_ENDPOINT"),
            openai_api_version=os.getenv("AZURE_API_VERSION"),
            openai_api_key=os.getenv("AZURE_API_KEY"),
            temperature=0
        )
        return model

    def correct_json(self,json_str):
        """
        Correct curly braces in JSON string
        Args:
            json string (String): Json string response generated by LLM
        Returns:
            correct json string
        """
        # logger.info("correcting json")
        try:
            # Clean json string
            pattern = r'^json\s*(.*?)\s*$'
            cleaned_string = re.sub(pattern, r'\1', json_str, flags=re.DOTALL)
            # Add missing closing curly braces
            num_opening_braces = cleaned_string.count('{')
            num_closing_braces = cleaned_string.count('}')
            if num_opening_braces > num_closing_braces:
                cleaned_string += '}' * (num_opening_braces - num_closing_braces)
            # Remove extra closing curly braces
            while cleaned_string.count('}') > cleaned_string.count('{'):
                cleaned_string = cleaned_string[:-1]
    
            # Add missing closing square braces
            num_opening_braces = cleaned_string.count('[')
            num_closing_braces = cleaned_string.count(']')
            if num_opening_braces > num_closing_braces:
                cleaned_string += ']' * (num_opening_braces - num_closing_braces)
            # Remove extra closing square braces
            while cleaned_string.count(']') > cleaned_string.count('['):
                cleaned_string = cleaned_string[:-1]
    
            return cleaned_string
        except Exception as e:
            return str(e)
